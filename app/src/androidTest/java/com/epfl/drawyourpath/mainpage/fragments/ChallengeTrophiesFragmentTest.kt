package com.epfl.drawyourpath.mainpage.fragments

import android.os.Bundle
import android.view.View
import androidx.arch.core.executor.testing.CountingTaskExecutorRule
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.core.widget.NestedScrollView
import androidx.fragment.app.testing.FragmentScenario
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.ViewAction
import androidx.test.espresso.action.ViewActions
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.*
import androidx.test.platform.app.InstrumentationRegistry
import com.epfl.drawyourpath.R
import com.epfl.drawyourpath.database.MockDatabase
import com.epfl.drawyourpath.utils.Utils
import org.hamcrest.Matcher
import org.hamcrest.Matchers
import org.hamcrest.core.StringContains.containsString
import org.junit.Rule
import org.junit.Test
import java.util.concurrent.TimeUnit

class ChallengeTrophiesFragmentTest {

    @get:Rule
    val instant = InstantTaskExecutorRule()

    @get:Rule
    val executorRule = CountingTaskExecutorRule()

    private var mockUser = MockDatabase.mockUser

    /**
     * wait for all thread to be done or throw a timeout error
     */
    private fun waitUntilAllThreadAreDone() {
        executorRule.drainTasks(2, TimeUnit.SECONDS)
        Thread.sleep(150)
    }

    @Test
    fun displayTrophies() {
        InstrumentationRegistry.getInstrumentation().targetContext.deleteDatabase("UserDatabase")
        waitUntilAllThreadAreDone()
        val scenario = FragmentScenario.launchInContainer(
            ChallengeFragment::class.java,
            Bundle(),
            R.style.Theme_Bootcamp,
        )

        waitUntilAllThreadAreDone()

        mockUser.trophies!!.forEach { trophy ->
            onView(withText(trophy.tournamentName)).perform(scrollTo())
            onView(withId(R.id.trophies_view)).check(matches(hasDescendant(withText(trophy.tournamentName))))
                .check(matches(hasDescendant(withText(trophy.tournamentDescription))))
                .check(matches(hasDescendant(withText(containsString(Utils.getDateAsString(trophy.date))))))
                .check(matches(hasDescendant(withText(containsString(trophy.ranking.toString())))))
        }

        // trophy generated by a tournament
        val tournamentTrophy = MockDatabase().MOCK_TOURNAMENTS[3].value!!
        onView(withText(tournamentTrophy.name)).perform(scrollTo())
        onView(withId(R.id.trophies_view)).check(matches(hasDescendant(withText(tournamentTrophy.name))))
            .check(matches(hasDescendant(withText(tournamentTrophy.description))))
            .check(matches(hasDescendant(withText(containsString(Utils.getDateAsString(tournamentTrophy.endDate.toLocalDate()))))))
            .check(matches(hasDescendant(withText(containsString("1")))))

        scenario.close()
    }

    private fun scrollTo(): ViewAction = ViewActions.actionWithAssertions(ScrollToAction())

    private class ScrollToAction(
        private val original: androidx.test.espresso.action.ScrollToAction = androidx.test.espresso.action.ScrollToAction(),
    ) : ViewAction by original {

        override fun getConstraints(): Matcher<View> = Matchers.anyOf(
            Matchers.allOf(
                withEffectiveVisibility(Visibility.VISIBLE),
                isDescendantOfA(isAssignableFrom(NestedScrollView::class.java)),
            ),
            original.constraints,
        )
    }
}
